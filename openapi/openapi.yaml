openapi: 3.0.4
info:
  title: Duel Channel API
  description: >
    Access API for the Duel Channel Ring Racers server. Get your Mobiums up!
  contact:
    name: frostu8
    email: theguy@frostu8.rs
  license:
    name: CC0-1.0
    url: https://creativecommons.org/publicdomain/zero/1.0/
  version: 0.1.0

servers:
  - url: https://duelchannel.ringrace.rs/api/v1
    description: The main API server.

tags:
  - name: match
    description: Match-related operations.
  - name: player
    description: Endpoints that operate only on players.

components:
  schemas:
    Player:
      type: object
      required:
        - id
        - display_name
      properties:
        id:
          type: string
          description: The player's "short ID."
          pattern: '^[\dA-Z]{6}$'
        display_name:
          type: string
          description: The most-recent display name of the player.
    CreatePlayer:
      type: object
      required:
        - display_name
        - public_key
      properties:
        display_name:
          type: string
          description: The player's current display name.
        public_key:
          type: string
          description: >
            The player's 64-length "RRID."

            Ring Racers profiles keep a public-private key pair to identify
            themselves to servers. This is the public key, untrimmed.
          pattern: '^[\dA-Fa-f]{64}$'
    Participant:
      allOf:
        - $ref: "#/components/schemas/Player"
        - type: object
          required:
            - team
            - no_contest
          properties:
            team:
              type: integer
              description: The team number the player is on.
            finish_time:
              type: integer
              description: The finish time of the player, in game tics.
            no_contest:
              type: boolean
              description: >
                Whether or not the player was allowed to finish.

                A `true` `no_contest` means that the player was absolutely not
                allowed to finish, but a `false` `no_contest` does not imply
                the opposite; that is, the player was able to finish. A set
                `finish_time` will let you know if the player did finish.
    Match:
      type: object
      required:
        - id
        - level_name
        - participants
        - status
        - accepting_bets
      properties:
        id:
          type: string
          description: The match UUID.
          pattern: '^[\dA-Fa-f]{8}-[\dA-Fa-f]{4}-[\dA-Fa-f]{4}-[\dA-Fa-f]{4}-[\dA-Fa-f]{12}$'
        level_name:
          type: string
          description: The name of the level the match was played on.
        participants:
          type: array
          description: A list of participants in the match.
          items:
            $ref: "#/components/schemas/Participant"
        status:
          $ref: "#/components/schemas/MatchStatus"
        accepting_bets:
          type: boolean
          description: Whether or not the match is still accepting bets.
        closes_at:
          type: string
          description: The time when the bets close.
          format: date-time
    CreateMatch:
      type: object
      required:
        - level_name
        - participants
      properties:
        level_name:
          type: string
          description: The name of the level the match will be played on.
        participants:
          type: array
          description: A list of participants ids and their details.
          items:
            type: object
            required:
              - id
              - team
            properties:
              id:
                type: string
                description: A player's "short ID."
                pattern: '^[\dA-Z]{6}$'
              team:
                type: integer
                description: The team number of the player.
        bet_time:
          type: integer
          description: >
            The amount of time to give to betting users before bets close.
    UpdateMatch:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/MatchStatus"
    UpdatePlacement:
      type: object
      properties:
        finish_time:
          type: integer
          description: The finish time of the player, in game tics.
    MatchStatus:
      type: integer
      description: >
        The status of a match.

        * `0` **Ongoing**  
          The match is still running. **Note**, a match that is running may
          not be accepting any more bets.
        * `1` **Concluded**  
          The match has ended, and the pots have been divvied up.
        * `2` **Cancelled**  
          The match ended abnormally. It may not have a victor, and wagers were
          returned.
      enum: [0, 1, 2]
    Error:
      type: object
      description: >
        A generic API error.
      required:
        - message
      properties:
        message:
          type: string
          description: A description of the error.
  examples:
    matchExample:
      value:
        id: 18e0b086-5557-4245-877d-19729bf6d4bd
        level_name: Robotnik Coaster
        participants:
          - id: GJBIJK
            display_name: Dr. Robotnik
            team: 0
            no_contest: false
          - id: 4ZWBU0
            display_name: Tails
            team: 1
            no_contest: false
        status: 0
        accepting_bets: true
        closes_at: 2025-10-21T04:45:32.287657947Z
    participantExample:
      value:
        id: GJBIJK
        display_name: Dr. Robotnik
        team: 0
        finish_time: 36149
        no_contest: false
    playerExample:
      value:
        id: 4ZWBU0
        display_name: Tails

paths:
  /matches:
    post:
      tags:
        - match
      summary: Create Match
      description: >
        Given the specifications of the match, starts a new match, notifying
        all clients currently connected.

        A match's bet end time will be determined as soon as it's created.
        Bets will begin to march even during this response!
      operationId: create_match
      requestBody:
        description: The match setup details.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMatch"
            example:
              level_name: Robotnik Coaster
              bet_time: 15
              participants:
                - id: GJBIJK
                  team: 0
                - id: 4ZWBU0
                  team: 1
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreateMatch"
      responses:
        "201":
          description: The created match.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
              examples:
                matchExample:
                  $ref: "#/components/examples/matchExample"
        "400":
          description: >
            A participant was added to the match that does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /matches/{match_id}:
    patch:
      tags:
        - match
      summary: Modify Match
      description: >
        **This endpoint cannot modify concluded matches.** When matches are
        concluded through this endpoint, they are locked.
      operationId: modify_match
      parameters:
        - name: match_id
          in: path
          description: Match UUID
          required: true
          schema:
            type: string
            example: 18e0b086-5557-4245-877d-19729bf6d4bd
            pattern: '^[\dA-Fa-f]{8}-[\dA-Fa-f]{4}-[\dA-Fa-f]{4}-[\dA-Fa-f]{4}-[\dA-Fa-f]{12}$'
      requestBody:
        description: The properties to update about the match.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMatch"
            example:
              status: 1
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UpdateMatch"
      responses:
        "200":
          description: The updated match.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"
              example:
                id: 18e0b086-5557-4245-877d-19729bf6d4bd
                level_name: Robotnik Coaster
                participants:
                  - id: GJBIJK
                    display_name: Dr. Robotnik
                    team: 0
                    finish_time: 36149
                    no_contest: false
                  - id: 4ZWBU0
                    display_name: Tails
                    team: 0
                    no_contest: true
                status: 1
                accepting_bets: false
        "400":
          description: >
            Attempted to modify an already concluded match.

            If the match has its `status` to **Concluded** or **Cancelled**, it
            is protected from updates.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: >
            Requested match does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /matches/{match_id}/players/{player_id}:
    patch:
      tags:
        - match
      summary: Modify Player Placement
      description: >
        This endpoint should be invoked when players exit levels; i.e. they
        finish with a finish time.

        If the match is concluded, you will be unable to update a player's
        placements. The only way to set a `no_contest` value is by concluding
        the match without updating the player's placement.
      operationId: modify_player_placement
      parameters:
        - name: match_id
          in: path
          description: Match UUID
          required: true
          schema:
            type: string
            example: 18e0b086-5557-4245-877d-19729bf6d4bd
            pattern: '^[\dA-Fa-f]{8}-[\dA-Fa-f]{4}-[\dA-Fa-f]{4}-[\dA-Fa-f]{4}-[\dA-Fa-f]{12}$'
        - name: player_id
          in: path
          description: Player ID
          required: true
          schema:
            type: string
            example: GJBIJK
            pattern: '^[\dA-Z]{6}$'
      requestBody:
        description: The new player's placement information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlacement"
            example:
              finish_time: 36149
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UpdatePlacement"
      responses:
        "200":
          description: The updated participant.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Participant"
              examples:
                participantExample:
                  $ref: "#/components/examples/participantExample"
        "400":
          description: >
            Attempted to modify an already concluded match.

            If the match has its `status` to **Concluded** or **Cancelled**, it
            is protected from updates.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: >
            The match does not exist, the player does not exist, or the player
            is not participating in this match.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /players:
    post:
      tags:
        - player
      summary: Register Player
      description: >
        This endpoint is idempotent; given the same public key, it will always
        return the same id for the player.
      operationId: register_player
      requestBody:
        description: The details of the player to register.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlayer"
            example:
              display_name: Tails
              public_key: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/CreatePlayer"
      responses:
        "201":
          description: The created player.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
              examples:
                playerExample:
                  $ref: "#/components/examples/playerExample"
              
